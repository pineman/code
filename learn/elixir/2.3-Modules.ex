# Module names are CamelCase.
# A module must be defined in a single file.
# A single file may contain multiple modules.
# Module names can contain a dot (.) to help with scoping.
# Modules can be nested.
# Functions must be defined inside a module.
# You can define modules on the shell directly.

defmodule Geometry do
  # Function names are snake_case.
  # Functions, like variables, can end with ? (convention: returns a bool)
  # or ! (convention: may raise a runtime error).
  def hello do # no arguments means you may omit the parens
    IO.puts('Hi im a circle!')
  end

  def rectangle_area(a, b) do
    a * b
  end
  # single line functions:
  # def rectangle_area(a, b), do: a * b

  # `def` is a macro
  def square_area(a) do
    #rectangle_area(a, a)
    # is this the same?
    a |> rectangle_area(a)
  end

  defmodule Rectangle do
    def area(a), do: area(a, a)

    def area(a, b), do: a * b
  end
end

defmodule Calculator do
  #def sum(a), do: sum(a, b)
  #def sum(a, b), do: a + b
  # OR!!
  # Two backslashes \\ denotes a default value
  def sum(a, b \\ 0), do: a + b # Generates two functions just like above

  # Any combination of arguments may have a default value.
  # This generates three functions: fun/2, fun/3 and fun/4.
  def fun(a, b \\ 0, c, d \\ 2) do
    a + b + c + d
  end
end

defmodule TestPrivate do
  def double(a) do
    sum(a, a)
  end

  # `defp` is a private function - it may only be used inside its module.
  defp sum(a, b) do
    a + b
  end

  #import IO # imports IO.* into the current module
  alias IO, as: MyIO # Remember module names are Uppercased!!

  # Using `alias` to shorten fully-qualified module names
  # Allows access to `Geometry.Rectangle.*` as just `Rectangle.*`
  alias Geometry.Rectangle

  def test(a) do
    MyIO.puts Rectangle.area(a)
  end
end

defmodule Geometry.Circle do
  @pi 3.141592 # Module Attributes. Inlined at compile time.
  # 'Registered' module attribuets are stored in the compiled module binary.
  # More info: https://hexdocs.pm/elixir/Module.html
  # Elixir's HTML docs are generated by the `ex_doc` tool
  # Another example of registered attributes are typespecs.
  # Typespecs specify type information, and `dialyzer` can perform static analysis.
  # https://hexdocs.pm/elixir/typespecs.html

  @moduledoc "Implements basic circle functions"

  @doc "Computes the area of a circle"
  @spec area(number) :: number # Typespec
  def area(r), do: @pi*r*r

  @doc "Computes the circumference of a circle"
  def circumference(r), do: 2 * @pi * r
end
