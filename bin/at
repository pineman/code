#!/usr/bin/env python3
# vim: ts=4 sts=4 sw=4 et

import sys
import os
import time

target_hour = int(sys.argv[1])
if not 1 <= target_hour <= 23:
    sys.exit(1)

t = time.localtime()
now_hour = t.tm_hour
now_min = t.tm_min
delta_hour = 0
if now_hour > target_hour:
    delta_hour = 24 - now_hour + target_hour
else:
    delta_hour = target_hour - now_hour

delta_seconds = delta_hour*60*60 - now_min*60
print(f' [+] Sleeping {delta_seconds} seconds before executing "{sys.argv[2]}" at {target_hour}:00')
time.sleep(delta_seconds)
r = os.system(sys.argv[2])
print(f' [+] Return: {r}')

##!/usr/bin/env python3
## vim: ts=4 sts=4 sw=4 et
#
#"""
#"""
#
#import sys
#from datetime import datetime, timedelta
#import time
#import os
#
#
#USAGE = f"""\
#Usage: {sys.argv[0]} [HOUR] [CMD]
#Run CMD at the next HOUR (at most within a day)
#CLOSED, WONTFIX: support 12h locales"""
#
#def parse_args(arg):
#    """
#    Parse and given `arg` into an int between 1 and 23 inclusive.
#    Returns: int, or None if parsing wasn't possible.
#    """
#    try:
#        hour = int(arg)
#    # So I've been told `int` raises ValueError. But its not mentioned anywhere
#    # in the docs. So I went to the source, right? And it turns out yeah, it
#    # does raise ValueError. It also raises TypeError sometimes, and I couldn't
#    # figure out when, exactly. Yay!
#    except ValueError:
#        return None
#
#    # TODO: this totally breaks on 12h locales :)
#    # and probably others too that I don't know of!!! yay!!!!
#    if hour < 1 or hour > 23:
#        return None
#
#    return hour
#
#
#def main():
#    """
#    """
#    if len(sys.argv) != 3:
#        sys.exit(USAGE)
#
#    hour = parse_args(sys.argv[1])
#    if not hour:
#        sys.exit(USAGE)
#
#    now = datetime.today()
#    future = datetime(now.year, now.month, now.day, hour=hour)
#    if now > future:
#        future += timedelta(days=1)
#
#    delta = future - now
#    time.sleep(delta.total_seconds())
#    os.system(sys.argv[2])
#
#
#if __name__ == '__main__':
#    main()
